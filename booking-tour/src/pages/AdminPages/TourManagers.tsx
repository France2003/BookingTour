import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
import { FaPlus, FaEdit, FaTrash, FaSearch, FaCheck, FaEye } from "react-icons/fa";
import { Modal, message } from "antd";
import TourStatus from "./TourStatus";

// üü¢ 1Ô∏è‚É£ ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu Tour
interface Tour {
  _id: string;  // S·ª≠ d·ª•ng _id ki·ªÉu string cho MongoDB ObjectId
  tour: string;
  startDate: string;
  endDate: string;
  createdAt: string;
  status: 'active' | 'booked' | 'completed';
}

export default function TourManagement() {
  // üü¢ 2Ô∏è‚É£ Khai b√°o state v·ªõi ki·ªÉu d·ªØ li·ªáu Tour[]
  const [tours, setTours] = useState<Tour[]>([]);
  const [search, setSearch] = useState("");
  const [isModalVisible, setIsModalVisible] = useState(false);  // ƒê·ªÉ ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã modal
  const [tourIdToDelete, setTourIdToDelete] = useState<string>(""); // L∆∞u ID c·ªßa tour c·∫ßn x√≥a

  useEffect(() => {
    fetchTours();
  }, []);

  async function fetchTours() {
    try {
      const response = await axios.get("/api/tours");
      setTours(response.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch tour", error);
    }
  }

  // Hi·ªÉn th·ªã modal x√°c nh·∫≠n x√≥a
  function showDeleteConfirm(id: string) {
    setTourIdToDelete(id);
    setIsModalVisible(true);
  }

  // ƒê√≥ng modal
  function handleCancel() {
    setIsModalVisible(false);
    setTourIdToDelete("");  // X√≥a ID tour ƒë√£ ch·ªçn
  }

  // X·ª≠ l√Ω x√≥a tour
  async function deleteTour() {
    if (tourIdToDelete) {
      try {
        const token = localStorage.getItem("accessToken"); // L·∫•y token t·ª´ localStorage

        if (!token) {
          console.log("Kh√¥ng t√¨m th·∫•y accessToken");
          return;
        }

        await axios.delete(`/api/tours/${tourIdToDelete}`, {
          headers: {
            Authorization: `Bearer ${token}`, // G·ª≠i token trong header
          },
        });

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        message.success("X√≥a tour th√†nh c√¥ng!");
        fetchTours(); // L√†m m·ªõi danh s√°ch tour sau khi x√≥a th√†nh c√¥ng
        handleCancel();  // ƒê√≥ng modal
      } catch (error) {
        console.error("L·ªói khi x√≥a tour", error);
        message.error("L·ªói khi x√≥a tour");
      }
    }
  }
  async function updateTourStatus(tourId: string, status: 'active' | 'booked' | 'completed') {
    try {
      const response = await axios.patch(`/api/tours/${tourId}/status`, { status });
      message.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i tour th√†nh c√¥ng!");
      fetchTours();  // L√†m m·ªõi danh s√°ch tour sau khi c·∫≠p nh·∫≠t
    } catch (error) {
      message.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i tour!");
    }
  }
  // L·ªçc danh s√°ch tour theo ti√™u ƒë·ªÅ (ho·∫∑c th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu mu·ªën)
  const filteredTours = tours.filter((tour) =>
    tour.tour.toLowerCase().includes(search.toLowerCase())
  );


  return (
    <div className="p-8 bg-gray-100 min-h-screen">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-800">Qu·∫£n L√Ω Tour</h1>
        <Link
          to="add"
          className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 shadow-md"
        >
          <FaPlus /> Th√™m Tour
        </Link>
      </div>

      {/* Thanh t√¨m ki·∫øm */}
      <div className="mb-6">
        <div className="relative w-full md:w-1/3">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm tour..."
            className="border border-gray-300 rounded-lg p-2 pl-10 w-full shadow-sm focus:ring-2 focus:ring-blue-400"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <FaSearch className="absolute left-3 top-3 text-gray-500" />
        </div>
      </div>

      {/* Danh s√°ch tour */}
      <div className="bg-white p-6 shadow-md rounded-xl overflow-x-auto">
        <table className="min-w-full text-left border-collapse">
          <thead>
            <tr className="bg-blue-600 text-white text-sm">
              <th className="p-3 text-center">STT</th>
              <th className="p-3">Ti√™u ƒë·ªÅ</th>
              <th className="p-3">Ng√†y kh·ªüi h√†nh</th>
              <th className="p-3">Ng√†y k·∫øt th√∫c</th>
              <th className="p-3">Ng√†y & gi·ªù th√™m</th>
              <th className="p-3 text-center">Ho·∫°t ƒë·ªông</th>
              <th className="p-3 text-center">Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredTours.length > 0 ? (
              filteredTours.map((tour, index) => (
                <tr key={tour._id} className="border-b hover:bg-gray-100 text-sm">
                  <td className="p-3 text-center font-semibold">{index + 1}</td>
                  <td className="p-3">{tour.tour}</td>
                  <td className="p-3">{new Date(tour.startDate).toLocaleDateString("vi-VN")}</td>
                  <td className="p-3">{new Date(tour.endDate).toLocaleDateString("vi-VN")}</td>
                  <td className="p-3">
                    {new Date(tour.createdAt).toLocaleString("vi-VN", {
                      day: "2-digit",
                      month: "2-digit",
                      year: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                      second: "2-digit",
                      hour12: false,
                    })}
                  </td>
                  <td className="p-3 text-center">
                    <TourStatus tourId={tour._id} currentStatus={tour.status} />
                  </td>
                  <td className="p-3 flex justify-center h-[100px] items-center gap-4">
                    <Link to={`/admin/tours/view/${tour._id}`} className="text-blue-500 hover:text-blue-600">
                      <FaEye size={18} />
                    </Link>
                    <Link to={`/admin/tours/edit/${tour._id}`} className="text-yellow-500 hover:text-yellow-600">
                      <FaEdit size={18} />
                    </Link>
                    <button
                      onClick={() => showDeleteConfirm(tour._id)}
                      className="text-red-500 hover:text-red-600"
                    >
                      <FaTrash size={18} />
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={7} className="text-center py-4 text-gray-500">
                  Kh√¥ng t√¨m th·∫•y tour ph√π h·ª£p.
                </td>
              </tr>
            )}
          </tbody>

        </table>
      </div>

      {/* Modal x√°c nh·∫≠n x√≥a */}
      <Modal
        title="X√°c nh·∫≠n x√≥a"
        visible={isModalVisible}
        onOk={deleteTour}
        onCancel={handleCancel}
        okText="X√≥a"
        cancelText="H·ªßy"
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tour n√†y?</p>
      </Modal>
    </div>
  );

}
