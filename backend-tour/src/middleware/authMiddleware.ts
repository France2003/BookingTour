import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

export interface AuthRequest extends Request {
    user?: { id: string; role: string };
}

// Middleware ki·ªÉm tra token
export const verifyToken = (req: AuthRequest, res: Response, next: NextFunction): void => {
    const authHeader = req.header("Authorization");
    if (!authHeader) {
        console.log("üö´ Kh√¥ng c√≥ header Authorization!");
        res.status(403).json({ message: "Truy c·∫≠p b·ªã t·ª´ ch·ªëi! Kh√¥ng c√≥ token." });
        return 
    }

    const token = authHeader.split(" ")[1];  // L·∫•y token sau "Bearer"
    if (!token) {
        console.log("üö´ Kh√¥ng t√¨m th·∫•y token!");
        res.status(403).json({ message: "Truy c·∫≠p b·ªã t·ª´ ch·ªëi! Token kh√¥ng h·ª£p l·ªá." });
        return 
    }

    try {
        console.log("üîë Token nh·∫≠n ƒë∆∞·ª£c:", token);
        // Ki·ªÉm tra token v√† gi·∫£i m√£ (decode)
        if (!process.env.JWT_SECRET) {
            throw new Error("‚ùå JWT_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong .env file!");
        }
        const decoded = jwt.verify(token, process.env.JWT_SECRET) as { id: string; role: string };
        console.log("‚úÖ Token h·ª£p l·ªá! User ID:", decoded.id, "Role:", decoded.role);
        req.user = decoded;  // G·∫Øn th√¥ng tin ng∆∞·ªùi d√πng v√†o request
        next();  // Ti·∫øn h√†nh v·ªõi request ti·∫øp theo
    } catch (error) {
        console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
        res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
        return 
    }
};

// Middleware ki·ªÉm tra quy·ªÅn admin
export const isAdmin = (req: AuthRequest, res: Response, next: NextFunction): void => {
    if (!req.user || req.user.role !== "admin") {
        res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!" });
        return 
    }
    next();  // N·∫øu l√† admin, ti·∫øp t·ª•c v·ªõi request
};
