import { Request, Response } from "express";
import mongoose from "mongoose";
import Tour from "../models/Tour";
// ‚úÖ L·∫•y danh s√°ch tour
export const getTours = async (req: Request, res: Response): Promise<void> => {
    try {
        const { region, search, isFeatured, location } = req.query;

        let filter: any = {};

        // ‚úÖ L·ªçc theo v√πng mi·ªÅn n·∫øu c√≥
        if (region) {
            filter.region = region;
        }
        //
        if (location) {
            filter.location = { $regex: new RegExp(location as string, 'i') }; // ƒêi·ªÅu ch·ªânh ƒë·ªÉ t√¨m ki·∫øm b·∫•t k·ª≥ chu·ªói n√†o ch·ª©a t√™n location
        }
        
        // ‚úÖ L·ªçc theo tour n·ªïi b·∫≠t
        if (isFeatured !== undefined) {
            filter.isFeatured = isFeatured === 'true';
        }
        // ‚úÖ T√¨m ki·∫øm theo t·ª´ kh√≥a (ti√™u ƒë·ªÅ, ƒë·ªãa ƒëi·ªÉm, n∆°i ƒë·∫øn)
        if (search) {
            filter.$or = [
                { title: new RegExp(search as string, "i") }, // t√¨m theo ti√™u ƒë·ªÅ
                { location: new RegExp(search as string, "i") }, // t√¨m theo ƒë·ªãa ƒëi·ªÉm
                { destination: new RegExp(search as string, "i") }, // t√¨m theo n∆°i ƒë·∫øn
            ];
        }
        // ‚úÖ L·∫•y danh s√°ch tour theo b·ªô l·ªçc v√† s·∫Øp x·∫øp theo th·ªùi gian t·∫°o
        const tours = await Tour.find(filter).sort({ createdAt: -1 });

        res.json(tours);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch tour:", error);
        res.status(500).json({ message: "L·ªói server", error });
    }
};
//
// ‚úÖ L·∫•y tour theo ID
export const getTourById = async (req: Request, res: Response): Promise<void> => {
    try {
        const tourId = req.params.id;
        console.log('Request for tour with ID:', tourId);  // Log ID
        // Ki·ªÉm tra n·∫øu tourId c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(tourId)) {
            res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
            return;
        }
        const tour = await Tour.findById(tourId);

        if (!tour) {
            console.log('Tour not found for ID:', tourId);
            res.status(404).json({ message: "Tour kh√¥ng t·ªìn t·∫°i!" });
            return
        }

        res.json(tour);
    } catch (error) {
        console.error("L·ªói khi l·∫•y tour:", error);
        res.status(500).json({ message: "L·ªói server", error });
    }
};
// ‚úÖ Th√™m tour m·ªõi (Ch·ªâ admin)
export const createTour = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log("üìù D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
        const {
            title,
            tour,
            isFeatured,
            tourCode,
            destination,
            vehicle,
            location,
            duration,
            highlights,
            price,
            imageUrl,
            additionalImageUrls, // ‚úÖ ƒê·ªïi t√™n t·ª´ additionalImages
            startDate,
            endDate,
            seatsAvailable,
            region,
            childPrice,
            babyPrice,
            program
        } = req.body;

        const missingFields = [];
        if (!title) missingFields.push('title');
        if (!tour) missingFields.push('tour');
        if (!tourCode) missingFields.push('tourCode');
        if (!destination) missingFields.push('destination');
        if (!vehicle) missingFields.push('vehicle');
        if (!location) missingFields.push('location');
        if (!duration) missingFields.push('duration');
        if (!highlights || !Array.isArray(highlights) || highlights.length === 0) {
            missingFields.push('highlights');
        }
        if (!price) missingFields.push('price');
        if (!imageUrl) missingFields.push('imageUrl');
        if (!additionalImageUrls || !Array.isArray(additionalImageUrls) || additionalImageUrls.length === 0)
            missingFields.push('additionalImageUrls');

        if (!startDate) missingFields.push('startDate');
        if (!endDate) missingFields.push('endDate');
        if (!seatsAvailable) missingFields.push('seatsAvailable');
        if (!region) missingFields.push('region');
        if (!childPrice) missingFields.push('childPrice');
        if (!babyPrice) missingFields.push('babyPrice');
        if (!program) missingFields.push('program');

        if (missingFields.length > 0) {
            res.status(400).json({ message: `Thi·∫øu th√¥ng tin: ${missingFields.join(', ')}` });
            return;
        }

        const existingTour = await Tour.findOne({ tourCode });
        if (existingTour) {
            res.status(400).json({ message: `Tour v·ªõi m√£ ${tourCode} ƒë√£ t·ªìn t·∫°i!` });
            return;
        }

        const formattedStartDate = new Date(startDate);
        const formattedEndDate = new Date(endDate);
        const formattedPrice = Number(price);
        const formattedSeats = Number(seatsAvailable);
        const formattedChildPrice = Number(childPrice);
        const formattedBabyPrice = Number(babyPrice);

        if (isNaN(formattedPrice) || isNaN(formattedSeats) || isNaN(formattedChildPrice) || isNaN(formattedBabyPrice)) {
            res.status(400).json({ message: "Gi√°, s·ªë gh·∫ø, gi√° tr·∫ª em v√† gi√° em b√© ph·∫£i l√† s·ªë" });
            return;
        }
        // ‚úÖ Validate "tour n·ªïi b·∫≠t" ph·∫£i trong nƒÉm 2025
        if (isFeatured && formattedStartDate.getFullYear() !== 2025) {
            res.status(400).json({ message: "Tour n·ªïi b·∫≠t ph·∫£i c√≥ ng√†y kh·ªüi h√†nh trong nƒÉm 2025." });
            return;
        }

        let discount = 0;
        const currentYear = new Date().getFullYear();
        if (formattedStartDate.getFullYear() === currentYear) {
            discount = 10;
        }

        const newTour = new Tour({
            title,
            tour,
            isFeatured,
            tourCode,
            destination,
            vehicle,
            location,
            duration,
            highlights,
            price: formattedPrice,
            discount,
            image: imageUrl,
            additionalImageUrls, // ‚úÖ d√πng additionalImageUrls
            startDate: formattedStartDate,
            endDate: formattedEndDate,
            seatsAvailable: formattedSeats,
            region,
            status: 'active',
            childPrice: formattedChildPrice,
            babyPrice: formattedBabyPrice,
            program,
        });

        await newTour.save();
        res.status(201).json({ message: "Th√™m tour th√†nh c√¥ng!", tour: newTour });
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m tour:", error);
        res.status(500).json({ message: "L·ªói server!", error });
    }
};
// ‚úÖ C·∫≠p nh·∫≠t tour
export const updateTour = async (req: Request, res: Response): Promise<void> => {
    try {
        // 1. Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
            return;
        }

        // 2. Validate gi√° tr·ªã c·ª• th·ªÉ n·∫øu c·∫ßn
        const { status, childPrice, babyPrice } = req.body;

        if (status && !['active', 'booked', 'completed'].includes(status)) {
            res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
            return;
        }

        if (childPrice !== undefined && isNaN(childPrice)) {
            res.status(400).json({ message: "Gi√° tr·∫ª em ph·∫£i l√† s·ªë" });
            return;
        }

        if (babyPrice !== undefined && isNaN(babyPrice)) {
            res.status(400).json({ message: "Gi√° em b√© ph·∫£i l√† s·ªë" });
            return;
        }

        // 3. C·∫≠p nh·∫≠t tour
        const updatedTour = await Tour.findByIdAndUpdate(
            req.params.id,
            { ...req.body },
            { new: true }
        );

        if (!updatedTour) {
            res.status(404).json({ message: "Tour kh√¥ng t·ªìn t·∫°i!" });
            return;
        }

        // 4. Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
        res.json({
            message: "C·∫≠p nh·∫≠t tour th√†nh c√¥ng!",
            tour: updatedTour
        });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tour:", error);
        res.status(500).json({
            message: "L·ªói khi c·∫≠p nh·∫≠t tour",
            error
        });
    }
};
export const updateTourStatus = async (req: Request, res: Response): Promise<void> => {
    try {
        const { status } = req.body;
        const { id } = req.params;
        console.log(`Updating tour with ID: ${id}, Status: ${status}`);  // Th√™m log ƒë·ªÉ ki·ªÉm tra

        if (!['active', 'booked', 'completed'].includes(status)) {
            res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
            return;
        }

        const updatedTour = await Tour.findByIdAndUpdate(id, { status }, { new: true });

        if (!updatedTour) {
            res.status(404).json({ message: "Tour kh√¥ng t·ªìn t·∫°i!" });
            return;
        }

        res.json({ message: `Tour ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh ${status}`, tour: updatedTour });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i tour:', error);  // Log l·ªói ƒë·ªÉ ki·ªÉm tra
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i tour", error });
    }
};
// ‚úÖ X√≥a tour
export const deleteTour = async (req: Request, res: Response): Promise<void> => {
    try {
        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
            return;
        }

        const deletedTour = await Tour.findByIdAndDelete(req.params.id);

        if (!deletedTour) {
            res.status(404).json({ message: "Tour kh√¥ng t·ªìn t·∫°i!" });
            return;
        }

        res.json({ message: "X√≥a tour th√†nh c√¥ng!", tour: deletedTour });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a tour", error });
    }
};
export const markTourAsCompleted = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra xem tour c√≥ t·ªìn t·∫°i hay kh√¥ng
        const tour = await Tour.findById(id);
        if (!tour) {
            res.status(404).json({ message: 'Tour kh√¥ng t·ªìn t·∫°i!' });
            return;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tour th√†nh 'completed'
        tour.status = 'completed';
        await tour.save();

        res.json({ message: 'Tour ƒë√£ ho√†n th√†nh!', tour });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i tour', error });
    }
};