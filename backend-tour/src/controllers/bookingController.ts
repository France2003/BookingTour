import { Request, Response } from "express";
import { Booking } from "../models/Booking"; // Sequelize model
import { ITour } from "models/Tour";

export const createBooking = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log("üìù D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
        const {
            tourId,
            adults,
            children,
            babies,
            paymentType,
            paymentMethod,
            totalAmount,
            status,
            passengers,
            contact,
            email,
        } = req.body;
        // Ki·ªÉm tra c√°c th√¥ng tin b·∫Øt bu·ªôc
        if (!tourId || !adults || !paymentType || !paymentMethod || !totalAmount) {
            res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: tourId, adults, paymentType, paymentMethod, totalAmount" });
            return;
        }
        // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c tham s·ªë
        if (typeof adults !== 'number' || typeof totalAmount !== 'number') {
            res.status(400).json({ message: "adults v√† totalAmount ph·∫£i l√† s·ªë." });
            return;
        }
        const date = new Date(); // Ng√†y ƒë·∫∑t tour l√† ng√†y hi·ªán t·∫°i
        // T·∫°o booking m·ªõi, c√°c tr∆∞·ªùng passengers v√† contact kh√¥ng b·∫Øt bu·ªôc
        const newBooking = await Booking.create({
            tourId,
            date,
            amount: totalAmount,
            adults,
            children,
            babies,
            paymentType,
            paymentMethod,
            status: status || 'pending', // N·∫øu kh√¥ng c√≥ status, m·∫∑c ƒë·ªãnh l√† 'pending'
            passengers: passengers || [], // N·∫øu kh√¥ng c√≥ passengers, m·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng
            contact: contact || {}, // N·∫øu kh√¥ng c√≥ contact, m·∫∑c ƒë·ªãnh l√† ƒë·ªëi t∆∞·ª£ng r·ªóng
            email
        });
        // ‚úÖ Tr·∫£ l·∫°i th√¥ng tin booking sau khi t·∫°o th√†nh c√¥ng
        res.status(201).json({
            _id: newBooking.id,
            message: "ƒê·∫∑t tour th√†nh c√¥ng!",
            booking: {
                id: newBooking.id,
                tourId: newBooking.tourId,
                date: newBooking.date,
                amount: newBooking.amount,
                adults: newBooking.adults,
                children: newBooking.children,
                babies: newBooking.babies,
                paymentType: newBooking.paymentType,
                paymentMethod: newBooking.paymentMethod,
                status: newBooking.status,
                email: newBooking.email
            }
        });

    } catch (error) {
        console.error("L·ªói khi ƒë·∫∑t tour:", error);
        if (error instanceof Error) {
            res.status(500).json({ message: `ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·∫∑t tour! ${error.message}` });
        } else {
            res.status(500).json({ message: "ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra khi ƒë·∫∑t tour!" });
        }
    }
};
// H√†m l·∫•y th√¥ng tin booking theo ID
export const getBookingById = async (req: Request, res: Response): Promise<void> => {
    try {
        const bookingId = req.params.id;  // L·∫•y bookingId t·ª´ URL params
        // T√¨m booking theo ID trong MongoDB v√† populate th√¥ng tin tour
        const booking = await Booking.findById(bookingId)
            .populate("tourId") // T·ª± ƒë·ªông l·∫•y th√¥ng tin tour t·ª´ b·∫≥ng Tour d·ª±a v√†o tourId
            .exec(); // th·ª±c hi·ªán truy v·∫•n d·ªØ li·ªáu
        if (!booking) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking v·ªõi ID n√†y." });
            return;
        }
        const tour = booking.tourId as ITour; // Chuy·ªÉn ƒë·ªïi tourId th√†nh ki·ªÉu ITour ƒë·ªÉ truy c·∫≠p c√°c thu·ªôc t√≠nh c·ªßa tour
        // Tr·∫£ v·ªÅ d·ªØ li·ªáu booking bao g·ªìm th√¥ng tin tour
        res.status(200).json({
            id: booking.id,
            tourId: booking.tourId,  // Tour ID
            tourCode: tour?.tourCode,  // M√£ tour t·ª´ tourId (gi·∫£ s·ª≠ l√† tourCode trong Tour model)
            date: booking.date,
            amount: booking.amount,
            adults: booking.adults,
            children: booking.children,
            babies: booking.babies,
            paymentType: booking.paymentType,
            paymentMethod: booking.paymentMethod,
            status: booking.status,
            endDate: tour?.endDate,  
            childPrice: tour?.childPrice,  
            babyPrice: tour?.babyPrice,  
            createdAt: booking.createdAt,
            updatedAt: booking.updatedAt,
            contact: booking.contact,
            passengers: booking.passengers,  // Danh s√°ch h√†nh kh√°ch
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu booking:", error);
        res.status(500).json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu booking." });
    }
};
export const getAllBookings = async (req: Request, res: Response): Promise<void> => {
    try {
        const bookings = await Booking.find() 
            .populate("tourId") // T·ª± ƒë·ªông l·∫•y to√†n b·ªô th√¥ng tin tour t·ª´ b·∫≥ng Tour d·ª±a v√†o tourId
            .exec();
        res.status(200).json(bookings);
    } catch (error) {
        console.error("L·ªói khi l·∫•y t·∫•t c·∫£ bookings:", error);
        res.status(500).json({ message: "L·ªói server" });
    }
};
export const addPassengers = async (req: Request, res: Response): Promise<void> => {
    try {
        const bookingId = req.params.id;
        const { passengers, contact } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu
        if (!passengers || !Array.isArray(passengers) || passengers.length === 0) {
            res.status(400).json({ message: "Kh√¥ng c√≥ h√†nh kh√°ch ƒë·ªÉ th√™m!" });
            return;
        }
        if (!contact || !contact.name || !contact.phone || !contact.email) {
            res.status(400).json({ message: "Th√¥ng tin li√™n h·ªá kh√¥ng h·ª£p l·ªá!" });
            return;
        }
        // T√¨m booking
        const booking = await Booking.findById(bookingId);
        if (!booking) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking v·ªõi ID n√†y." });
            return;
        }
        // G√°n d·ªØ li·ªáu
        booking.passengers = passengers;
        booking.contact = contact;
        // L∆∞u l·∫°i 
        await booking.save();
        res.status(200).json({
            message: "Th√¥ng tin h√†nh kh√°ch ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!",
            booking: {
                id: booking.id,
                passengers: booking.passengers,
                contact: booking.contact,
                tourId: booking.tourId,
                date: booking.date,
                amount: booking.amount,
                adults: booking.adults,
                children: booking.children,
                babies: booking.babies,
                paymentType: booking.paymentType,
                paymentMethod: booking.paymentMethod,
                status: booking.status,
            },
        });
    } catch (error) {
        console.error("L·ªói khi th√™m h√†nh kh√°ch:", error);
        res.status(500).json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra khi th√™m th√¥ng tin h√†nh kh√°ch." });
    }
};
export const updateBookingPayment = async (req: Request, res: Response): Promise<void> => {
    try {
        const booking = await Booking.findById(req.params.id);
        if (!booking) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking." });
            return
        }
        const { paymentMethod, paymentInfo } = req.body;
        if (paymentMethod) booking.paymentMethod = paymentMethod;
        if (paymentInfo) booking.paymentInfo = paymentInfo;

        await booking.save();
        res.status(200).json({ message: "C·∫≠p nh·∫≠t thanh to√°n th√†nh c√¥ng!", booking });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t thanh to√°n." });
    }
};
export const DeteleBooking = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        await Booking.findByIdAndDelete(id);
        res.json({ message: "Booking ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" });
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a booking:", error);
        res.status(500).json({ message: "X√≥a booking th·∫•t b·∫°i" });
    }
};
export const getBookingsByEmail = async (req: Request, res: Response): Promise<void> => {
    const { email } = req.query;
    if (!email || typeof email !== 'string') {
        res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc v√† ph·∫£i l√† chu·ªói" });
        return;
    }
    try {
        const bookings = await Booking.find({ email });
        res.json({ bookings });
    } catch (err) {
        console.error("L·ªói khi l·∫•y bookings:", err);
        res.status(500).json({ message: "L·ªói server", error: err });
    }
};

