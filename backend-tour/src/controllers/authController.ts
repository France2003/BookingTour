import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import UserModel, { IUser } from "../models/UserModel";
import User from "../models/UserModel";
import { Booking } from "../models/Booking";
import { Types } from 'mongoose';
// ƒêƒÉng k√Ω
export const registerUser = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log("Received Data:", req.body);
        const { phone, email, password } = req.body;
        if (!phone || !email || !password) {
            res.status(400).json({ message: "Phone, email, and password are required!" });
            return;
        }
        const existingUser = await UserModel.findOne({ $or: [{ phone }, { email }] });
        if (existingUser) {
            res.status(400).json({ message: "Phone number or email already in use" });
            return;
        }
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);
        const newUser = new UserModel({ phone, email, password: hashedPassword });
        await newUser.save();
        res.status(201).json({
            message: "User registered successfully!",
            user: {
                _id: newUser._id,
                phone: newUser.phone,
                email: newUser.email
            }
        });
    } catch (error) {
        res.status(500).json({ error: (error as Error).message });
    }
};
// ƒêƒÉng nh·∫≠p
export const loginUser = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log("üîç Request body:", req.body); // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n t·ª´ FE
        const { phone, email, password } = req.body;

        if (!email && !phone) {
            res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i" });
            return;
        }
        if (!password) {
            res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" });
            return;
        }

        const user = await UserModel.findOne({ $or: [{ phone }, { email }] });
        if (!user) {
            res.status(400).json({ message: "Email/SƒêT ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
            return;
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            res.status(400).json({ message: "Email/SƒêT ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
            return;
        }

        if (!process.env.JWT_SECRET) {
            console.error("‚ùå L·ªñI: JWT_SECRET kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong .env");
            res.status(500).json({ message: "L·ªói h·ªá th·ªëng, JWT_SECRET kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a!" });
            return;
        }

        // ‚úÖ Ki·ªÉm tra n·∫øu email l√† ADMIN_EMAIL th√¨ g√°n role l√† "admin"
        const isAdmin = email === process.env.ADMIN_EMAIL;
        const role = isAdmin ? "admin" : "user";
        const token = jwt.sign(
            { id: user._id, role },
            process.env.JWT_SECRET,
            { expiresIn: "30d" } // Token c√≥ hi·ªáu l·ª±c 30 ng√†y
        );
        res.status(200).json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
            token,
            user: {
                _id: user._id,
                phone: user.phone,
                email: user.email,
                role, // ‚úÖ Tr·∫£ v·ªÅ role
            },
        });
    } catch (error) {
        res.status(500).json({ error: (error as Error).message });
    }
};
//L·∫•y danh s√°ch ng∆∞·ªùi d√πng( T·ª´ ƒêƒÉng K√Ω)
export const getUsers = async (req: Request, res: Response) => {
    try {
        const users = await User.find({ role: "user" }); // ‚úÖ Ch·ªâ l·∫•y user th∆∞·ªùng
        res.status(200).json(users); // Tr·∫£ v·ªÅ danh s√°ch user
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng!" });
    }
};
//L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng theo ID
export const getUserById = async (req: Request, res: Response): Promise<void> => {
    try {
        const userId = req.params.id;
        const user = await UserModel.findById(userId);
        if (!user) {
            res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
            return
        }
        const email = user.email; // L·∫•y email t·ª´ th√¥ng tin ng∆∞·ªùi d√πng

        if (!email) {
            res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y email c·ªßa ng∆∞·ªùi d√πng!" });
            return;
        }
        // L·∫•y l·ªãch s·ª≠ ƒë·∫∑t tour c·ªßa ng∆∞·ªùi d√πng theo email
        const bookings = await Booking.find({ email })
            .populate("tourId") // L·∫•y th√¥ng tin tour t·ª´ `tourId` trong `Booking`
            .sort({ date: -1 })  // S·∫Øp x·∫øp theo ng√†y ƒë·∫∑t tour, m·ªõi nh·∫•t tr∆∞·ªõc
            .lean();
        console.log("Bookings:", bookings); // Ki·ªÉm tra d·ªØ li·ªáu bookings

        // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† bookings
        res.status(200).json({ user, bookings });

    } catch (error) {
        console.error("L·ªói server:", error);
        res.status(500).json({ message: "L·ªói server!", error });
    }
};
/// C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng
export const updateUser = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { name, phone, email, birthdate, gender, address, city, avatar } = req.body;

        const updated = await UserModel.findByIdAndUpdate(
            id,
            {
                name,
                phone,
                email,
                birthdate,  // ng√†y sinh
                gender,     // gi·ªõi t√≠nh
                address,    // ƒë·ªãa ch·ªâ c·ª• th·ªÉ
                city,       // th√†nh ph·ªë
                avatar,     // ·∫£nh ƒë·∫°i di·ªán
            },
            { new: true }
        );

        if (!updated) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t!" });
            return;
        }

        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: updated });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng" });
    }
};
//X√≥a ng∆∞·ªùi d√πng
export const deleteUser = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;

        const deletedUser = await UserModel.findByIdAndDelete(id);
        if (!deletedUser) {
            res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
            return;
        }

        res.status(200).json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a ng∆∞·ªùi d√πng", error });
    }
};









